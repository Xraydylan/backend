/events:
  get:
    tags:
    - "events"
    summary: "Returns all events"
    description: "Returns a list of all available events"
    operationId: "getEvents"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "successful operation"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Event"
    security:
    - api_key: []
  post:
    tags:
    - "events"
    summary: "Add a new event"
    description: "Creates a new event"
    operationId: "createEvent"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      description: "Event object that needs to be created"
      required: true
      schema:
        $ref: "#/definitions/Event"
    responses:
      201:
        description: "Created"
      405:
        description: "Invalid input"
    security:
    - api_key: []
  put:
    tags:
    - "events"
    summary: "Update existing events"
    description: "Updates a bulk of events"
    operationId: "updateEvents"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      description: "Events that need to be updated"
      required: true
      schema:
        type: "array"
        items:
          $ref: "#/definitions/Event"
    responses:
      501:
        description: "Not Implemented"
    security:
    - api_key: []
  delete:
    tags:
    - "events"
    summary: "Deletes all events"
    description: "Deletes all events"
    operationId: "deleteEvents"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "deleted all events"
    security:
    - api_key: []

/events/{id}:
  get:
    tags:
    - "events"
    summary: "Get a event by id"
    description: "Returns a single event"
    operationId: "getEventById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of event to return"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "successful operation"
        schema:
          $ref: "#/definitions/Event"
      400:
        description: "Invalid ID supplied"
      404:
        description: "Event not found"
    security:
    - api_key: []
  post:
    tags:
    - "events"
    summary: "Create a event by id"
    description: "Create a single event by id"
    operationId: "createEventById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of event to create"
      required: true
      type: "integer"
      format: "int64"
    responses:
      500:
        description: "Method not allowed"
    security:
    - api_key: []
    deprecated: true
  put:
    tags:
    - "events"
    summary: "Update a event by id"
    description: "Update a single event by id"
    operationId: "updateEventById"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of event to update"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "successful operation"
        schema:
          $ref: "#/definitions/Event"
      400:
        description: "Invalid ID supplied"
      404:
        description: "Event not found"
    security:
    - api_key: []
  delete:
    tags:
    - "events"
    summary: "Deletes a events by id"
    description: "Deletes a specific events by id"
    operationId: "deleteEventById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of event to delete"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "successful operation"
    security:
    - api_key: []
