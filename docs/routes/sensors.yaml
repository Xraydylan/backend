/sensors:
  get:
    tags:
    - "sensors"
    summary: "Returns all sensors"
    description: "Returns a list of all available sensors"
    operationId: "getSensors"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "successful operation"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Sensor"
    security:
    - api_key: []
  post:
    tags:
    - "sensors"
    summary: "Add a new sensor"
    description: "Creates a new sensor"
    operationId: "createSensor"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      description: "Sensor object that needs to be created"
      required: true
      schema:
        $ref: "#/definitions/Sensor"
    responses:
      201:
        description: "Created"
      405:
        description: "Invalid input"
    security:
    - api_key: []
  put:
    tags:
    - "sensors"
    summary: "Update existing sensors"
    description: "Updates a bulk of sensors"
    operationId: "updateSensors"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      description: "Sensors that need to be updated"
      required: true
      schema:
        type: "array"
        items:
          $ref: "#/definitions/Sensor"
    responses:
      501:
        description: "Not Implemented"
    security:
    - api_key: []
  delete:
    tags:
    - "sensors"
    summary: "Deletes all sensors"
    description: "Deletes all sensors"
    operationId: "deleteSensors"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "deleted all sensors"
    security:
    - api_key: []

/sensors/{id}:
  get:
    tags:
    - "sensors"
    summary: "Get a sensor by id"
    description: "Returns a single sensor"
    operationId: "getSensorById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of sensor to return"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "successful operation"
        schema:
          $ref: "#/definitions/Sensor"
      400:
        description: "Invalid ID supplied"
      404:
        description: "Sensor not found"
    security:
    - api_key: []
  post:
    tags:
    - "sensors"
    summary: "Create a sensor by id"
    description: "Create a single sensor by id"
    operationId: "createSensorById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of sensor to create"
      required: true
      type: "integer"
      format: "int64"
    responses:
      500:
        description: "Method not allowed"
    security:
    - api_key: []
    deprecated: true
  put:
    tags:
    - "sensors"
    summary: "Update a sensor by id"
    description: "Update a single sensor by id"
    operationId: "updateSensorById"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of sensor to update"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "successful operation"
        schema:
          $ref: "#/definitions/Sensor"
      400:
        description: "Invalid ID supplied"
      404:
        description: "Sensor not found"
    security:
    - api_key: []
  delete:
    tags:
    - "sensors"
    summary: "Deletes a sensors by id"
    description: "Deletes a specific sensors by id"
    operationId: "deleteSensorById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of sensor to delete"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "successful operation"
    security:
    - api_key: []
