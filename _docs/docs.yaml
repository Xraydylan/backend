openapi: 3.0.0
info:
  description: API specification for Aura REST API. See <a target=_blank
    href='https://drive.google.com/open?id=1r5UP4bS-ar_1ba3VrCOIdHIKzuWLY_TR'>UML</a>
    for more details.
    Go to <a href="aura.dmz.teco.edu">aura.dmz.teco.edu</a> to try it out!
  version: 1.0.0
  title: Aura APIs
tags:
  - name: auth
    description: authentication api
  - name: api
    description: backend api
paths:
  /auth/register:
    post:
      tags:
      - auth
      summary: Register a new user
      description: Register a new user with email and password 
      operationId: registerNewUser
      requestBody:
        description: Registers a new user with email and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserforAuth'
      responses:
        '200':
          description: OK
  /auth/login:
    post:
      tags:
      - auth
      summary: Log in user
      description: Log in user and returns access_token
      operationId: loginUser
      requestBody:
        description: Log in a user with email and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserforAuth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthObject'
  /api/users:
    get:
      tags:
      - api
      summary: Returns requesting user
      description: Returns user data of requesting user
      operationId: getUsers
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
      security:
        - access_token: []
    put:
      tags:
      - api
      summary: Update requesting user
      description: Update user data of requesting user
      operationId: updateUser
      parameters: []
      requestBody:
        description: Update a user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
      security:
        - access_token: []
components:
  securitySchemes:
    access_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Please provide a valid JWT token
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    User:
      type: "object"
      properties:
        sex:
          type: "string"
          description: sex of user
          enum: ["m", "f", "d"]
          example: "f"
        birthday:
          type: "string"
          description: birthdate of user
          example: "1990-01-01"
        weight:
          type: "number"
          description: weight of user in kg
          example: 60
        clientVersion:
          type: "integer"
          description: version number of user device
          format: "int64"
          example: 1
        platform:
          type: "string"
          description: platform of user device
          enum: ["ios", "android", "windows"]
          example: "android"
      xml:
        name: "User"
    UserforAuth:
      type: "object"
      properties:
        email:
          type: "string"
          description: email of user
          example: "test@aura.com"
        password:
          type: "string"
          description: password for user account
          example: "examplePW123"
      xml:
        name: "UserforAuth"
    AuthObject:
      type: object
      properties:
        access_token:
          type: string
          description: Bearer JWT Token
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkZGQ4OWEwOTU3MzllMDAxOWI2NDE5YSIsImlhdCI6MTU3NDc5OTc4NSwiZXhwIjoxNTc1MDU4OTg1fQ.cSTapFKpbTirbx0qgwiiRVXbev2pvtKHfZokFemEfAg
        refresh_token:
          type: string
          description: Refresh JWT Token - Not in us
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkZGQ4OWEwOTU3MzllMDAxOWI2NDE5YSIsImlhdCI6MTU3NDc5OTc4NSwiZXhwIjoxNTc1MDU4OTg1fQ.cSTapFKpbTirbx0qgwiiRVXbev2pvtKHfZokFemEfAg
      xml:
        name: AuthObject
security:
  - access_token: []
