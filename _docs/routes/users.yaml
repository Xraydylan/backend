/users:
  get:
    tags:
    - "users"
    summary: "Returns requesting user"
    description: "Returns user data of requesting user"
    operationId: "getUsers"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "successful operation"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
    security:
    - api_key: []
  post:
    tags:
    - "users"
    summary: "Add a new user"
    description: "Creates a new user"
    operationId: "createUser"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      description: "User object that needs to be created"
      required: true
      schema:
        $ref: "#/definitions/User"
    responses:
      201:
        description: "Created"
      405:
        description: "Invalid input"
    security:
    - api_key: []
  put:
    tags:
    - "users"
    summary: "Update existing users"
    description: "Updates a bulk of users"
    operationId: "updateUsers"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      description: "Users that need to be updated"
      required: true
      schema:
        type: "array"
        items:
          $ref: "#/definitions/User"
    responses:
      501:
        description: "Not Implemented"
    security:
    - api_key: []
  delete:
    tags:
    - "users"
    summary: "Deletes all users"
    description: "Deletes all users"
    operationId: "deleteUsers"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "deleted all users"
    security:
    - api_key: []

/users/{id}:
  get:
    tags:
    - "users"
    summary: "Get a user by id"
    description: "Returns a single user"
    operationId: "getUserById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of user to return"
      required: true
      type: "string"
    responses:
      200:
        description: "successful operation"
        schema:
          $ref: "#/definitions/User"
      400:
        description: "Invalid ID supplied"
      404:
        description: "User not found"
    security:
    - api_key: []
  post:
    tags:
    - "users"
    summary: "Create a user by id"
    description: "Create a single user by id"
    operationId: "createUserById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of user to create"
      required: true
      type: "string"
    responses:
      200:
        description: "successful operation"
        schema:
          $ref: "#/definitions/User"
      400:
        description: "Invalid ID supplied"
    security:
    - api_key: []
  put:
    tags:
    - "users"
    summary: "Update a user by id"
    description: "Update a single user by id"
    operationId: "updateUserById"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of user to update"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "successful operation"
        schema:
          $ref: "#/definitions/User"
      400:
        description: "Invalid ID supplied"
      404:
        description: "User not found"
    security:
    - api_key: []
  delete:
    tags:
    - "users"
    summary: "Deletes a users by id"
    description: "Deletes a specific users by id"
    operationId: "deleteUserById"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      description: "ID of user to delete"
      required: true
      type: "string"
    responses:
      200:
        description: "successful operation"
    security:
    - api_key: []
