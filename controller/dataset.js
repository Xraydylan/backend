const Model = require('../models/dataset').model;
const UserModel = require('../models/user').model;
const Experiment = require('../models/experiment').model;
const DatasetLabeling = require('../models/datasetLabeling').model;
const DatasetLabel = require('../models/datasetLabel').model;

/**
 * Util Function
 * Create labelings from experiment
 */
async function autoCreateLabelings(dataset) {
	const experiment = await Experiment.findById(dataset.experiments);
	const datasetLabeling = new DatasetLabeling({
		labelingId: experiment,
		labels: []
	});
	let {start} = dataset;
	let end;
	for (let i = 0; i < experiment.instructions.length; i++) {
		end = start + experiment.instructions[i].duration;
		const datasetLabel = new DatasetLabel({
			name: `autogenerated datasetLabel ${i}`,
			type: experiment.instructions[i].labelType,
			start,
			end
		});
		start = end;
		await datasetLabel.save();
		datasetLabeling.labels.push(datasetLabel);
		i++;
	}
	await datasetLabeling.save();
	return datasetLabeling;
}

/**
 * get all datasets
 */
async function getDatasets(ctx) {
	ctx.body = await Model.find({});
	ctx.status = 200;
}

/**
 * get dataset by id
 */
async function getDatasetById(ctx) {
	ctx.body = await Model.findById({_id: ctx.params.id});
	ctx.status = 200;
	return ctx.body;
}

/**
 * create a new dataset
 */
async function createDataset(ctx) {
	const dataset = ctx.request.body;

	// if userId empty, set it to requesting user
	if(!dataset.userId) {
		const {authId} = ctx.state;
		const user = await UserModel.findOne({authId});
		dataset.userId = user._id;
	}

	if('experiments' in dataset && dataset.experiments !== null
    && !('labelings' in dataset)) {
		dataset.labelings = await autoCreateLabelings(dataset);
	} else if('experiments' in dataset && dataset.experiments !== null
    && 'labelings' in dataset && dataset.labelings.length > 0) {
		ctx.body = {error: 'Do not set experiment and labelings'};
		ctx.status = 400;
		return ctx;
	}

	const document = new Model(dataset);
	await document.save();

	ctx.body = document;
	ctx.status = 201;
	return ctx;
}

/**
 * update a dataset specified by id
 */
async function updateDatasetById(ctx) {
	await Model.findByIdAndUpdate(ctx.params.id, {$set: ctx.request.body});
	ctx.body = {message: `updated dataset with id: ${ctx.params.id}`};
	ctx.status = 200;
	return ctx;
}

/**
 * delete a dataset specified by id
 */
async function deleteDatasetById(ctx) {
	const {authId} = ctx.state;
	const user = await UserModel.findOne({authId});
	await Model.findOneAndDelete({_id: ctx.params.id, userId: user._id});
	ctx.body = {message: `deleted dataset with id: ${ctx.params.id}`};
	ctx.status = 200;
	return ctx;
}

module.exports = {
	getDatasets,
	getDatasetById,
	createDataset,
	updateDatasetById,
	deleteDatasetById
};
